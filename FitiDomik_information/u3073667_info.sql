-- phpMyAdmin SQL Dump
-- version 5.0.2
-- https://www.phpmyadmin.net/
--
-- Хост: localhost
-- Время создания: Апр 27 2025 г., 11:23
-- Версия сервера: 8.0.25-15
-- Версия PHP: 7.4.33

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `u3073667_info`
--

-- --------------------------------------------------------

--
-- Структура таблицы `code`
--

CREATE TABLE `code` (
  `id` int NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` text COLLATE utf8mb4_unicode_ci,
  `content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `language` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT 'text',
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `code_files`
--

CREATE TABLE `code_files` (
  `id` int NOT NULL,
  `file_name` varchar(255) NOT NULL,
  `file_path` text NOT NULL,
  `file_content` longtext,
  `is_directory` tinyint(1) DEFAULT '0',
  `parent_id` int DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `code_folders`
--

CREATE TABLE `code_folders` (
  `id` int NOT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `parent_id` int DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `code_snippets`
--

CREATE TABLE `code_snippets` (
  `id` int NOT NULL,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `code` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `language` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `folder_id` int DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `components`
--

CREATE TABLE `components` (
  `id` int NOT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `status` enum('bought','not_bought') CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'not_bought',
  `price_type` enum('bought','custom','undefined') CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'undefined',
  `price` decimal(10,2) DEFAULT NULL,
  `quantity` int NOT NULL DEFAULT '1',
  `info` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `components`
--

INSERT INTO `components` (`id`, `name`, `status`, `price_type`, `price`, `quantity`, `info`, `created_at`) VALUES
(15, 'Raspberry Pi 5', 'not_bought', 'undefined', NULL, 1, 'Основной контроллер', '2025-04-07 00:10:30'),
(16, 'Сенсорный экран', 'not_bought', 'undefined', NULL, 1, 'Интерфейс управления', '2025-04-07 00:10:47'),
(17, 'Raspberry Pi Camera Module или USB-камера', 'not_bought', 'undefined', NULL, 1, 'Камера для машинного зрения', '2025-04-07 00:10:59'),
(18, 'Блок питания', 'bought', 'undefined', NULL, 1, 'Raspberry Pi 5 требует мощный адаптер (15 Вт, USB-C)\r\n', '2025-04-07 00:11:40'),
(19, 'Плата контроллера драйвера двигателя L298N', 'not_bought', 'custom', '112.00', 1, 'Управление двигателями', '2025-04-07 00:12:06'),
(20, '16-канальный 12-битный модуль PCA9685PW', 'not_bought', 'custom', '162.00', 1, 'Управление сервоприводами\r\n', '2025-04-07 00:12:28'),
(21, 'Релейный модуль 5 В, 12 В, 24 В с оптроном', 'not_bought', 'custom', '52.00', 1, 'Включение насосов, ламп\r\n', '2025-04-07 00:12:47'),
(22, 'Прецизионный подъемник с планетарным замедлением', 'not_bought', 'custom', '64.00', 2, 'Подъем механизмов\r\n', '2025-04-07 00:13:06'),
(23, 'Серво SG90 SG92R MG90S MG995 MG996R', 'not_bought', 'custom', '92.00', 5, 'Управление механизмами\r\n', '2025-04-07 00:13:30'),
(24, 'Погружной насос DC6V', 'bought', 'custom', '68.00', 1, 'Полив растений\r\n', '2025-04-07 00:13:46'),
(25, 'Трубка для полива', 'bought', 'custom', '120.00', 1, 'Подключение системы полива\r\n', '2025-04-07 00:14:03'),
(26, 'Форсунка тумана', 'not_bought', 'custom', '300.00', 1, 'Создание тумана\r\n', '2025-04-07 00:14:17'),
(27, 'Ультразвуковой датчик HC-SR04', 'not_bought', 'custom', '57.00', 1, 'Измерение уровня воды в баке\r\n', '2025-04-07 00:14:33'),
(28, 'Модуль TZT ADS1115 16 бит I2C', 'bought', 'custom', '93.00', 1, 'АЦП для точных измерений\r\n', '2025-04-07 00:14:58'),
(29, 'Датчик температуры и влажности AM2302', 'not_bought', 'custom', '67.00', 1, 'Контроль климата\r\n', '2025-04-07 00:15:13'),
(30, 'Оптический датчик освещенности GY-302 BH1750', 'bought', 'custom', '67.00', 1, 'Контроль освещенности\r\n', '2025-04-07 00:15:25'),
(31, 'Датчик CO₂', 'bought', 'custom', '1500.00', 1, 'Контроль качества воздуха\r\n', '2025-04-07 00:15:45'),
(32, 'Барометр', 'bought', 'custom', '200.00', 1, 'Контроль давления\r\n', '2025-04-07 00:16:00'),
(33, 'YL-69 (FC-28)', 'bought', 'custom', '150.00', 1, 'Датчик влажности почвы\r\n', '2025-04-07 00:16:13'),
(34, 'Лампа 50W', 'bought', 'custom', '400.00', 1, 'Освещение\r\n', '2025-04-07 00:16:24');

-- --------------------------------------------------------

--
-- Структура таблицы `feedback`
--

CREATE TABLE `feedback` (
  `id` int NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `message` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `attachment` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `status` enum('new','in_progress','completed') COLLATE utf8mb4_unicode_ci DEFAULT 'new',
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `is_answered` tinyint(1) DEFAULT '0',
  `is_faq` tinyint(1) DEFAULT '0',
  `type` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT 'Обратная связь'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `feedback_cooldown`
--

CREATE TABLE `feedback_cooldown` (
  `ip_address` varchar(45) NOT NULL,
  `last_message_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `feedback_cooldown`
--

INSERT INTO `feedback_cooldown` (`ip_address`, `last_message_time`) VALUES
('176.59.174.112', '2025-04-10 11:51:15'),
('198.12.89.150', '2025-04-19 21:26:44'),
('2a02:2168:8ea4:3800:7d68:6e10:fb9:2df3', '2025-04-07 11:42:50'),
('2a02:2168:8ea4:3800:9f5:4044:bfdd:d9cc', '2025-04-08 09:15:24');

-- --------------------------------------------------------

--
-- Структура таблицы `feedback_messages`
--

CREATE TABLE `feedback_messages` (
  `id` int NOT NULL,
  `name` varchar(255) NOT NULL,
  `message` text NOT NULL,
  `type` varchar(50) NOT NULL,
  `image_path` varchar(255) DEFAULT NULL,
  `ip_address` varchar(45) NOT NULL,
  `is_answered` tinyint(1) DEFAULT '0',
  `is_faq` tinyint(1) DEFAULT '0',
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `feedback_messages`
--

INSERT INTO `feedback_messages` (`id`, `name`, `message`, `type`, `image_path`, `ip_address`, `is_answered`, `is_faq`, `created_at`) VALUES
(43, 'Search Engine', 'Hello,\r\n\r\nfor your website do be displayed in searches your domain needs to be indexed in the Google Search Index.\r\n\r\nTo add your domain to Google Search Index now, please visit \r\n\r\nhttps://SearchRegister.info/\r\n', 'error', NULL, '198.12.89.150', 0, 0, '2025-04-19 21:26:44');

-- --------------------------------------------------------

--
-- Структура таблицы `feedback_replies`
--

CREATE TABLE `feedback_replies` (
  `id` int NOT NULL,
  `message_id` int NOT NULL,
  `reply_text` text NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `feedback_replies`
--

INSERT INTO `feedback_replies` (`id`, `message_id`, `reply_text`, `created_at`) VALUES
(1, 2, 'ага)', '2025-04-05 17:27:19'),
(2, 3, 'соси', '2025-04-06 09:50:54'),
(3, 4, 'Привет ок', '2025-04-06 14:45:50'),
(4, 7, 'красиво', '2025-04-06 14:51:36'),
(5, 16, 'привет да', '2025-04-06 20:04:25'),
(6, 27, 'нет', '2025-04-06 20:30:06'),
(7, 27, 'нет', '2025-04-06 20:33:34'),
(8, 27, 'нет', '2025-04-06 20:35:18'),
(9, 33, 'привет', '2025-04-06 20:45:35'),
(10, 33, 'привет', '2025-04-06 20:45:54'),
(11, 33, 'привет', '2025-04-06 20:47:29'),
(12, 33, 'привет', '2025-04-06 20:47:41'),
(13, 32, 'нет', '2025-04-06 20:47:54'),
(14, 34, 'нет', '2025-04-06 20:48:36'),
(15, 35, 'привет все норм', '2025-04-06 20:52:38'),
(16, 36, 'отлично', '2025-04-07 11:43:17');

-- --------------------------------------------------------

--
-- Структура таблицы `photos`
--

CREATE TABLE `photos` (
  `id` int NOT NULL,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `filename` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `photos`
--

INSERT INTO `photos` (`id`, `title`, `filename`, `created_at`) VALUES
(17, 'Иконка ФитоДомик', '67fb70c98d5b2.png', '2025-04-13 11:07:37'),
(18, 'Логотип ФитоДомик', '67fb70dab3100.jpg', '2025-04-13 11:07:54'),
(19, 'Raspberry Pi ', '6804d91e674e7.png', '2025-04-20 14:23:10');

-- --------------------------------------------------------

--
-- Структура таблицы `posts`
--

CREATE TABLE `posts` (
  `id` int NOT NULL,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `posts`
--

INSERT INTO `posts` (`id`, `title`, `content`, `created_at`) VALUES
(7, '🚀 ФитоДомик: стартуем! Первая запись 💡', 'Всем привет! Сегодня начинается большое приключение — я запускаю работу над умной мини-фермой \"ФитоДомик\" 🌱🏡. Это будет не просто проект — это будет инновационный помощник, который возьмёт на себя заботу о растениях и сделает выращивание зелени умным и автоматизированным!\r\n\r\n📌 Что он будет делать:\r\n🌡️ Контроль климата (температура, влажность почвы, CO₂)\r\n💧 Автополив (насос + капельная система)\r\n💡 Умное освещение (LED)\r\n🎥 Машинное зрение (анализ состояния растений)\r\n🔋 Резервное питание (на случай отключения электричества)\r\n📲 Веб-интерфейс для управления фермой\r\n\r\nЭто только начало. Сейчас у меня мозговой штурм 🧠 — думаю, как всё соединить, какие компоненты использовать, какие функции добавить, и как сделать всё удобно, красиво и эффективно.\r\n\r\n👥 В команду хочу пригласить Изразцова Илью — возможно, мы объединим мой проект мини-фермы и его метеостанцию в один суперпроект для 11 класса! 😎\r\n\r\n🛠️ В этом дневнике буду делиться:\r\n\r\nидеями 💭\r\nтрудностями 😬\r\nэтапами производства 🧰\r\nи, конечно, прогрессом! 📈\r\n\r\nБуду рад, если кто-то вдохновится и пойдёт со мной по этому пути. Следите за апдейтами, впереди — много интересного! 🤖🌿', '2025-04-06 23:58:32');

-- --------------------------------------------------------

--
-- Структура таблицы `sessions`
--

CREATE TABLE `sessions` (
  `id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `user_id` int NOT NULL,
  `ip_address` varchar(45) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `user_agent` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `last_activity` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `settings`
--

CREATE TABLE `settings` (
  `id` int NOT NULL DEFAULT '1',
  `cooldown_time` int DEFAULT '600'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `settings`
--

INSERT INTO `settings` (`id`, `cooldown_time`) VALUES
(1, 0);

-- --------------------------------------------------------

--
-- Структура таблицы `timeline`
--

CREATE TABLE `timeline` (
  `id` int NOT NULL,
  `title` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `timeline`
--

INSERT INTO `timeline` (`id`, `title`, `content`, `created_at`) VALUES
(9, ' Умный ФитоДомик с климат-контролем и энергосбережением 💡', 'Общее описание 📝\r\nФитоДомик представляет собой полуцилиндрический пластиковый корпус 🏠 с двойным дном, где верхний слой заполнен грунтом для растений 🌱, а нижний служит для отвода и рециркуляции лишней влаги 💧. Ферма оснащена системой автоматического полива 🚿, освещения 💡, вентиляции 🌬️ и климат-контроля 🌡️, а также взаимодействует с системой умного дома 🏠 через Wi-Fi или Bluetooth.\r\n\r\nОсновные компоненты и их функции\r\n\r\n1. Конструкция корпуса 🏗️\r\n\r\n • Полуцилиндрическая форма – обеспечивает равномерное распределение света и вентиляции.\r\n • Двойное дно – нижний отсек собирает лишнюю воду и направляет её обратно в резервуар для повторного использования ♻️.\r\n • Отверстия для вентиляции – обеспечивают циркуляцию воздуха, предотвращая образование плесени 🍄 и перегрев 🔥.\r\n\r\n2. Контроль микроклимата 🌡️\r\n\r\n • Датчик температуры – следит за окружающей температурой внутри фермы и регулирует вентиляцию.\r\n • Датчик влажности почвы – управляет системой автополива, включая насос при необходимости.\r\n • Вентилятор на вдув – активируется при перегреве, обеспечивая доступ свежего воздуха 🍃.\r\n • Светодиодная лампа – выполняет функцию освещения 💡 и обогрева 🔥, управляется вручную или по расписанию ⏰.\r\n\r\n3. Система автополива 🚿\r\n\r\n • Погружной насос – подаёт воду из резервуара в систему капельного полива.\r\n • Капельный полив – равномерно распределяет влагу по почве.\r\n • Резервуар для воды – хранит запас жидкости для автополива.\r\n\r\n4. Управляющий модуль (Центр управления фермы) 🕹️\r\n\r\n • Дисплей с кнопками или сенсорный экран – для настройки параметров температуры, влажности и освещения.\r\n • Ручное управление – возможность принудительно включать/выключать полив и лампу, задавать расписание ⏰.\r\n • Wi-Fi/Bluetooth модуль – для удалённого контроля через приложение 📱\r\n\r\n5. Внешние сенсоры и дополнительные системы 📡\r\n\r\n • Датчики температуры, влажности и освещённости в помещении – помогают адаптировать условия в ферме.\r\n • Датчик CO₂ – следит за качеством воздуха 💨 и при необходимости включает вентиляцию.\r\n • Барометр – прогнозирует погоду 🌤️, что может влиять на автоматические сценарии управления климатом.\r\n• Система энергосбережения – включает резервное питание, отключает неиспользуемые устройства.\r\n • Контроллер бесперебойного питания (UPS) – защищает ферму от отключений электричества ⚡.\r\n• Умная зарядка аккумулятора – управляет подачей энергии, продлевая срок службы батареи 🔋.\r\n • Оповещение об отключении электричества – отправляет уведомления 🔔 при сбоях в электроснабжении.\r\n\r\nКак это будет использоваться? 🤔\r\n 1. Пользователь устанавливает ферму в удобном месте и загружает в неё грунт и растения 🌱.\r\n 2. Настраивает параметры климата (температуру, влажность, освещение) через дисплей или приложение.\r\n 3. Система автоматически регулирует микроклимат:\r\n • Полив включается при низкой влажности почвы.\r\n • Вентилятор активируется при перегреве или высоком уровне CO₂.\r\n • Лампа работает по расписанию, обеспечивая растениям нужное количество света 💡.\r\n 4. Если пропадает электричество, система переходит на резервное питание и отправляет уведомление 🔔 пользователю.\r\n 5. Датчики контролируют окружающую среду и могут корректировать режим работы фермы.', '2025-04-06 21:00:56'),
(10, '🌿 Умный ФитоДомик с автоматическим управлением и мониторингом 📊', 'ФитоДомик редставляет собой полуцилиндрический пластиковый корпус 🏠 с двойным дном:\r\n • Верхняя часть содержит грунт и растения 🌱.\r\n • Нижняя часть собирает лишнюю влагу 💧 и направляет её обратно в систему полива 🚿.\r\n\r\nУстройство полностью автономно 🔋, имеет встроенное бесперебойное питание ⚡ и систему оповещений 🔔.\r\n\r\nОсновные компоненты и их функции\r\n\r\n1. Контроль микроклимата 🌡️\r\n\r\n • Датчик температуры – следит за окружающей температурой внутри фермы и регулирует вентиляцию 🌬️.\r\n • Датчик влажности почвы – управляет системой автополива, включая насос 펌프 при необходимости.\r\n • Вентилятор 5В/12В – активируется при перегреве 🔥 или повышенном уровне CO₂, обеспечивая приток свежего воздуха 🍃.\r\n • Светодиодная лампа – регулируемая по яркости, создаёт оптимальные условия для роста растений 🌱.\r\n\r\n2. Система автополива 🚿\r\n\r\n • Погружной насос – подаёт воду из резервуара в систему капельного полива.\r\n • Капельный полив – равномерно распределяет влагу по почве.\r\n • Резервуар для воды – хранит запас жидкости.\r\n • Датчик уровня воды (ультразвуковой HC-SR04 или M03 бесконтактный) – отслеживает уровень воды в баке и показывает его за счет светодиодов 💡.\r\n\r\n3. Управляющий модуль (Центр управления фермы) 🕹️\r\n\r\n • Основной контроллер, который управляет всеми системами.\r\n • Сенсорный дисплей – для настройки параметров температуры, влажности и освещения.\r\n • Ручное управление – кнопки для принудительного включения/выключения систем.\r\n • Bluetooth-связь – для управления через смартфон 📱.\r\n\r\n4. Внешние датчики и автоматизация 📡\r\n\r\n • Датчик температуры, влажности и давления – измеряет параметры в комнате.\r\n • Датчик CO₂ – следит за уровнем углекислого газа.\r\n • Датчик освещённости – регулирует яркость лампы.\r\n\r\n5. Энергоснабжение и бесперебойная работа ⚡\r\n\r\n • Контроллер бесперебойного питания (UPS) – обеспечивает работу системы при отключении электричества.\r\n • Аккумулятор + умная зарядка (BMS/TP4056) – поддерживает автономность 🔋.\r\n • Оповещение об отключении электричества – отправляет уведомление 🔔 пользователю и показывает это светодиодом 💡.\r\n\r\nКак это будет работать? 🤔\r\n 1. Пользователь сажает растения 🌱 и настраивает параметры через дисплей или приложение 📱.\r\n 2. Система сама регулирует климат:\r\n • Полив включается при низкой влажности почвы.\r\n • Вентиляция активируется при перегреве 🔥 или высоком CO₂.\r\n • Лампа регулирует освещение в зависимости от времени суток.\r\n 3. Пользователь получает уведомления 🔔 о низком уровне воды или отключении электричества ⚡.\r\n 4. Можно вручную управлять системами через дисплей или Bluetooth 📱.', '2025-04-06 21:01:38'),
(11, '🤖 Добавление умной камеры с машинным зрением', '🤖 Добавление умной камеры с машинным зрением значительно улучшит автоматизацию мини-фермы. Она позволит наблюдать за ростом растений 🌱, замерять их высоту и оценивать качество выращивания на основе анализа изображений 📸.\r\n\r\nКакие задачи будет выполнять камера? 🤔\r\n\r\n 1. Контроль роста:\r\n • Фиксирует рост растения 🌱 во времени ⏱️.\r\n • Замеряет высоту с помощью компьютерного зрения 👁️.\r\n 2. Оценка состояния растения:\r\n • Анализирует цвет листьев 🌿 (обнаружение пожелтения 🍂 или пятен).\r\n • Определяет деформации, признаки болезни 🥀 или нехватки воды 💧.\r\n 3. Распознавание проблем:\r\n • Определяет, есть ли на листьях вредители 🐛.\r\n • Анализирует загущенность посадки (нужно ли прореживание).\r\n 4. Передача данных в систему управления:\r\n • Камера отправляет результаты анализа на дисплей или смартфон 📱.\r\n • Уведомляет пользователя, если с растением что-то не так 🔔.\r\n\r\nКак это будет работать? 🤔\r\n\r\n 1. Камера каждый день делает снимки растений 🌱.\r\n 2. Алгоритмы анализируют изображение 📸:\r\n • Определяют высоту растения 🌱 по масштабу.\r\n • Проверяют цвет и структуру листьев 🌿.\r\n 3. Если обнаружены проблемы (желтые листья 🍂, вредители 🐛, замедленный рост), система отправляет уведомление 🔔.\r\n\r\nV3.2\r\n🌐 Добавление веб-интерфейса для управления мини-фермой 💻\r\n\r\nВместо мобильного приложения 📱 ферма будет иметь веб-интерфейс (сайт) 🌐, где можно:\r\n • Просматривать данные с датчиков (температура 🌡️, влажность 💧, CO₂, уровень воды).\r\n • Следить за ростом растений 🌱 через камеру 📸.\r\n • Настраивать автоматические параметры (полив 🚿, освещение 💡, вентиляция 🌬️).\r\n • Получать уведомления 🔔 о проблемах (например, низкий уровень воды).\r\n\r\nВеб-интерфейс будет работать через локальный сервер 📡, который можно открыть с любого устройства в сети (компьютера 🖥️, телефона 📱, планшета 📱). Это обеспечит удобство доступа без необходимости установки приложений.\r\n\r\nV3.3\r\n👨‍💻 Разработка веб-интерфейса для управления мини-фермой 🌐\r\n\r\n1. Функции веб-интерфейса ⚙️\r\nВеб-интерфейс позволит пользователю:\r\n✅ Просматривать параметры (температура 🌡️, влажность 💧, уровень воды, автополив 🚿, освещенность 💡, CO₂ в ферме и комнате, давление).\r\n✅ Включать/выключать системы (полив 🚿, лампу 💡, вентиляцию 🌬️).\r\n✅ Настраивать расписание работы (освещение 💡).\r\n✅ Получать оповещения 🔔 (низкий уровень воды, проблемы, болезни растений 🥀).\r\n✅ Просматривать фото с камеры 📸 и анализировать рост растений 🌱.\r\n\r\n2. Структура интерфейса 🧩\r\nИнтерфейс будет состоять из следующих разделов:\r\n\r\n1️⃣ Главный экран 🏠\r\nСтруктура веб-интерфейса\r\n\r\n 1) Состояние комнаты 🏠 (верхний блок)\r\n  • Освещённость 💡\r\n  • Уровень CO₂\r\n   • Прогноз погоды 🌤️\r\n  • Заряд аккумулятора 🔋\r\n   • Состояние электричества ⚡ (есть питание или отключено)\r\n\r\n 2) Состояние фермы 🌿\r\n  • Температура внутри фермы 🌡️\r\n  • Влажность почвы 💧\r\n  • Уровень воды в баке 💧\r\n\r\n 3) Настройки ⚙️\r\n  • Порог срабатывания датчика температуры\r\n  • Порог срабатывания датчика влажности\r\n  • Настройка работы лампы (время включения/выключения)\r\n\r\n2️⃣ Управление 🕹️\r\n • Кнопки для ручного включения/выключения полива, вентиляции, лампы.\r\n • Ползунки и поля для изменения настроек (например, расписания работы лампы).\r\n\r\n3️⃣ Настройки ⚙️\r\n • Настройка пороговых значений (например, влажность почвы, при которой включается полив).\r\n • Выбор интервалов съёмки камеры 📸.\r\n • Настройки оповещений 🔔 (какие события должны отправлять предупреждения).\r\n\r\n4️⃣ Лог событий 📜\r\n • Записывает все важные события (включение полива, изменение температуры, критические ошибки).\r\n\r\n3. Как реализовать веб-интерфейс? 🤔\r\n🖥️ Фронтенд (Пользовательский интерфейс)\r\n • HTML, CSS, JavaScript (простая веб-страница).\r\n • Chart.js – для графиков температуры, влажности и роста растений 🌱.\r\n\r\n📡 Бэкенд (Обмен данными с фермой)\r\n • основная плата будет отправлять данные на сервер 📡 через Wi-Fi или Bluetooth.', '2025-04-06 21:02:10'),
(12, 'Логика работы камеры в ФитоДомике', '1. Основные задачи камеры:\r\n\r\n • Контроль роста: фиксация роста во времени, измерение высоты.\r\n • Оценка состояния: анализ цвета листьев, выявление пожелтения, пятен, деформаций.\r\n • Распознавание проблем: обнаружение вредителей, загущенности посадки.\r\n • Передача данных: отправка анализа в веб-интерфейс, уведомления при проблемах.\r\n\r\n2. Как это работает:\r\n\r\n 1. Камера делает снимок (раз в N часов).\r\n 2. Алгоритм анализирует изображение:\r\n • Определяет контуры растений.\r\n • Замеряет высоту растения (по сравнению с эталонным объектом).\r\n • Анализирует цвет листьев (RGB/HSV анализ).\r\n • Выявляет пятна, пожелтения, признаки болезней.\r\n • Проверяет наличие вредителей (сравнение с эталонными изображениями).\r\n 3. Данные отправляются в веб-интерфейс.\r\n 4. Если обнаружены проблемы, система отправляет уведомление.\r\n\r\nВсё, что в дальнейшем будет связано с умной камерой 📷, будет описано в статье \"Обучение камеры\" 👁️ по ссылке: https://teletype.in/@legendasd/FarmKamera 📚', '2025-04-06 21:02:35'),
(13, 'Описание интерфейса', 'Устройство оснащено сенсорным экраном, что требует крупных и интуитивно понятных кнопок. Из-за компактности проекта текста минимум, акцент на иконках и числовых показателях. Управление организовано через свайпы, позволяя переключаться между четырьмя основными окнами.\r\n\r\nДополнительные функции:\r\n\r\nТёмная и светлая тема — если экран цветной, можно добавить режим смены темы: светлый для дневного времени, тёмный для ночного, чтобы не напрягать глаза.\r\n\r\nВизуальное оповещение — если влажность слишком низкая, температура выходит за пределы нормы или CO₂ поднимается слишком высоко, экран может мигать красным или выдавать индикаторное предупреждение, сигнализируя о критических условиях.\r\n\r\nОкно 1: Главное (Основное меню)\r\nЗдесь отображаются основные показатели системы в реальном времени.\r\n\r\nВерхняя часть экрана\r\nДатчик CO₂ – показывает уровень углекислого газа.\r\nБарометр – отображает текущее атмосферное давление.\r\nЦентральная часть экрана\r\nДатчик влажности почвы – значение в процентах.\r\nДатчик температуры в мини-ферме – температура в градусах Цельсия.\r\nВремя работы лампы – отображается установленное время работы светодиодной лампы.\r\nВизуальный детектинг уровня воды – в виде вертикального столбика с несколькими делениями, который заполняется в зависимости от количества воды. Это позволяет наглядно контролировать уровень влаги в системе.\r\nПереключение экранов – осуществляется свайпами вправо/влево.\r\nОкно 2: Настройки мини-фермы\r\nЗдесь пользователь может регулировать параметры мини-фермы.\r\n\r\nРазмещение кнопок:\r\nЦентральная часть – отображает текущие значения параметров (температура, влажность, время работы лампы).\r\nСправа – кнопки \"+\" для увеличения значений.\r\nСлева – кнопки \"−\" для уменьшения значений.\r\nПример:\r\nВ центре отображается \"Время работы лампы: 6 часов\".\r\nСправа кнопка \"+\" (добавить час).\r\nСлева кнопка \"−\" (убрать час).\r\nПо такому же принципу настраиваются влажность почвы и температура.\r\nОкно 3: Прогноз погоды\r\nОснован на данных с барометра.\r\n\r\nЦентральная часть – отображение прогнозируемых погодных условий (ясно, дождь, облачно и т. д.).\r\nДополнительная информация – возможные изменения температуры и давления.\r\nЧасы – в верхней части экрана отображаются текущие время и дата, что помогает пользователю ориентироваться по времени суток.\r\nОкно 4: Графики изменений параметров\r\nДанное окно позволяет анализировать динамику параметров системы во времени.\r\n\r\nГрафики по каждому датчику:\r\nИзменение температуры в мини-ферме.\r\nДинамика влажности почвы.\r\nКолебания уровня CO₂.\r\nИзменения атмосферного давления.\r\nГрафики изменения pH\r\nГрафическое отображение (линейные графики, столбцы) для наглядности.', '2025-04-06 21:03:02'),
(14, '💡 Автоматический подъёмный экран для ФитоДомика 💡', 'В нашем проекте появилась идея сделать экран, который будет автоматически подниматься при активации. Это повысит удобство работы и придаст системе более технологичный вид.\r\n\r\n🔧 Как это будет работать?\r\nЭкран, встроенный в верхний корпус с управляющей электроникой, в сложенном состоянии будет находиться в горизонтальном положении. При нажатии кнопки он поднимется на угол примерно 60 градусов, чтобы пользователь мог комфортно взаимодействовать с сенсорным интерфейсом.\r\n\r\nПри этом в сложенном состоянии экран будет полностью выключен и не потреблять электричество, что позволит снизить энергозатраты системы.\r\n\r\n🔩 Какие механизмы использовать?\r\nДля реализации этой функции подойдут серво-приводы или линейный актуатор.\r\n\r\nСерво-привод – позволяет быстро и точно регулировать угол наклона.\r\nАктуатор – даёт более плавное и мощное движение, что особенно полезно, если экран тяжелый.\r\n⚙ Что нужно учесть при разработке?\r\n🔹 Жёсткость конструкции – так как экран сенсорный, он должен быть устойчивым при нажатиях. Чтобы исключить люфт и расшатывание, можно добавить фиксирующий механизм или газовые упоры.\r\n🔹 Безопасность – чтобы предотвратить перегрузку или застревание механизма, стоит установить датчик положения (например, магнитный концевик или потенциометр). Это позволит системе контролировать угол наклона и автоматически отключать привод при достижении заданного положения.\r\n🔹 Энергосбережение – в сложенном положении экран будет полностью выключаться, снижая потребление электроэнергии. Включение будет происходить только при активации.\r\n\r\n🎯 Преимущества такого решения\r\n✅ Удобный доступ к интерфейсу\r\n✅ Автоматизация процесса\r\n✅ Устойчивость экрана при работе\r\n✅ Эффектный внешний вид\r\n✅ Снижение энергопотребления\r\n\r\nСейчас эта идея на стадии концепции, но уже обсуждаем возможные механизмы и реализацию.', '2025-04-06 21:03:33'),
(15, 'Блок управления', 'Raspberry Pi 5 – довольно мощная плата, и её возможностей, скорее всего, хватит для всего проекта. Давай разберёмся по датчикам и подключению.\r\n\r\n1️⃣ Количество поддерживаемых датчиков\r\nRaspberry Pi 5 имеет:\r\n🔹 GPIO-пины – 40 пинов, из них часть можно использовать для датчиков.\r\n🔹 I²C (2 шины) – позволяет подключать до 127 устройств на одной шине (при наличии разных адресов).\r\n🔹 SPI (6 контроллеров) – подходит для датчиков с быстрой передачей данных (камера, дисплей).\r\n🔹 UART (4 порта) – для последовательных датчиков (например, GPS, pH-метр).\r\n🔹 USB (4 порта) – можно подключать дополнительные устройства, такие как камеры, модули Wi-Fi/Bluetooth.\r\n\r\n2️⃣ Хватит ли одной Raspberry Pi 5?\r\nСкорее всего, да, но зависит от нагрузки:\r\n✅ Обработка изображений (OpenCV, нейросети) – Raspberry Pi 5 справится, но если обработка тяжёлая, может понадобиться внешний сервер.\r\n✅ Датчики климата (температура, влажность, CO₂, освещённость и т. д.) – легко подключаются через I²C, GPIO или SPI.\r\n✅ Камера для анализа растений – Raspberry Pi 5 поддерживает 2 камеры MIPI CSI (например, Raspberry Pi Camera v3).\r\n✅ Серво-приводы и актуаторы – можно управлять через PWM-контроллер (например, PCA9685) или драйверы моторов.\r\n✅ Сеть и управление – есть Wi-Fi 6 и Gigabit Ethernet, что упрощает удалённое управление.\r\n\r\n3️⃣ Когда может понадобиться дополнительная плата?\r\n🔸 Если датчиков очень много и не хватает GPIO/I²C, можно добавить Arduino или ESP32 как дополнительный контроллер.\r\n🔸 Если обработка изображений занимает много ресурсов, можно передавать данные на более мощный сервер.\r\n🔸 Если система расширяется (например, больше актуаторов, штор, насосов), можно использовать несколько микроконтроллеров, связанных по UART или Wi-Fi.\r\n\r\nВывод:\r\n📌 Одной Raspberry Pi 5 хватит для проекта, если грамотно распределить подключение датчиков.', '2025-04-06 21:03:56'),
(16, 'Полный список датчиков и систем, которые будут', '🔍 Датчики мониторинга\r\nЭти датчики будут отслеживать состояние окружающей среды и почвы:\r\n\r\n🌡 Температура и влажность воздуха\r\n💧 Влажность почвы\r\n☀ Освещённость \r\n🌬 CO₂ и качество воздуха (2шт)\r\n🌀 Давление воздуха\r\n\r\n⚙ Автоматизированные системы управления\r\nЭти модули будут управлять различными процессами на ферме:\r\n\r\n🚰 Автополив – насос\r\n💡 Освещение – светодиодная лампа\r\n🎛 Климат-контроль – вентиляторы\r\n🛑 Шторы/тенты – серво-приводы или шаговые моторы + датчики положения\r\n📺 Поднимающийся экран – серво-привод или линейный актуатор + концевики\r\n\r\n📸 Система компьютерного зрения\r\n🔹 Камера для анализа растений\r\n🔹 Обнаружение болезней – OpenCV + нейросеть\r\n🔹 Мониторинг роста – сравнение изображений по дням (Сейчас эта идея на стадии концепции)\r\n\r\n🛠 Система контроля и обратной связи\r\n🔹 Датчики положения штор – магнитные концевики / потенциометр\r\n🔹 Датчик уровня воды –  ультразвуковой\r\n🔹 Контроль pH почвы', '2025-04-06 21:04:16'),
(17, 'Управление оборудованием и сенсорами', 'Raspberry Pi 5 будет являться центральным элементом управления системой и собирать данные с различных датчиков для анализа состояния фермы. Вот более подробное описание работы с каждым типом сенсоров и их значимость для системы:\r\n\r\n🌡 Температура и влажность воздуха\r\nЦель: Контроль микроклимата внутри мини-фермы для обеспечения комфортных условий для роста растений.\r\nКак работает: Данные о температуре и влажности будут собираться с помощью датчиков, которые позволят регулировать системы отопления или охлаждения, а также вентиляцию, чтобы поддерживать оптимальные условия для растений.\r\n💧 Влажность почвы\r\nЦель: Автоматизация полива для поддержания правильного уровня влажности почвы в зависимости от потребностей растений.\r\nКак работает: Считывание данных с датчиков влажности почвы, которые управляют насосом автополива. Если влажность ниже установленного порога, насос включается, если выше – выключается.\r\n☀ Освещенность\r\nЦель: Регулировка освещения для поддержания необходимого уровня света для растений, особенно в условиях низкой освещенности.\r\nКак работает:\r\nЕсли ☀ освещенность < 300 люкс → включить лампу.\r\nЕсли ☀ освещенность > 600 люкс → выключить лампу.\r\nДля предотвращения лишнего расхода энергии.\r\n🌬\r\n🌬 CO₂ и качество воздуха (2 шт.)\r\nЦель:\r\nМониторинг качества воздуха в мини-ферме для поддержания оптимального уровня CO₂, необходимого для фотосинтеза.\r\n\r\nКак работает:\r\nПервый датчик CO₂ будет располагаться внутри мини-фермы, чтобы отслеживать концентрацию CO₂ в области, где находятся растения. Если уровень CO₂ становится слишком низким, система автоматически включает вентиляцию, чтобы повысить его концентрацию. Это помогает поддерживать оптимальные условия для фотосинтеза, что способствует улучшению роста растений.\r\nВторой датчик CO₂ будет установлен на крышке фермы, чтобы контролировать уровень CO₂ в комнате, где находится мини-ферма. Этот датчик будет отслеживать концентрацию CO₂, что важно для общего состояния микроклимата. Если уровень CO₂ становится слишком высоким, это может негативно повлиять на здоровье человека. В таком случае система будет использовать этот датчик для предупреждения о повышенном уровне CO₂ в помещении с помощью светодиода на передней панели.\r\n🌀 Давление воздуха\r\nЦель: Обеспечение мониторинга давления в комнате и использование данных для прогнозирования погоды.\r\nКак работает: Датчик давления будет установлен на верхней части корпуса мини-фермы и работать в связке с датчиком углекислого газа как часть метеостанции для мониторинга состояния воздуха в комнате. Пользователи смогут увидеть данные о текущем давлении в помещении на дисплее мини-фермы. Эти данные также могут быть использованы для прогнозирования изменений в погодных условиях, таких как изменение атмосферного давления, что поможет предсказать возможные погодные явления, например, дожди или перепады температуры.\r\n\r\n🔹 Контроль pH почвы\r\nЦель: Определение уровня кислотности почвы, что помогает в принятии решения о необходимости удобрений или других корректировок в уходе за растениями.\r\nКак работает: Данные pH передаются в систему, которая может рекомендовать применение определенных удобрений для оптимизации роста растений и отправлять уведомления об этом в Telegram.\r\n🔹 Датчик уровня воды\r\nЦель: Контроль за количеством воды в резервуарах для полива.\r\nКак работает: Ультразвуковой датчик уровня воды следит за уровнем жидкости в баке, чтобы предотвратить его переполнение или недостаток.\r\n🛑 2. Контроль автоматических систем\r\n🛑 Шторы (управление серво-приводами/моторчиками)\r\nШторы играют важную роль в поддержании оптимальной температуры в мини-ферме. Они будут регулироваться как по заданному расписанию, так и в зависимости от температуры.\r\n\r\nСтандартный режим: Шторы открываются и закрываются по заранее заданному расписанию.\r\nАдаптивный режим (с 11:00 до 20:00):\r\nЕсли 🌡 температура выше 35°C → закрыть шторы, чтобы избежать перегрева.\r\nЕсли 🌡 температура ниже 15°C → открыть шторы, чтобы повысить температуру за счет солнечного света.\r\nНочью (с 20:00 до 11:00): Шторы не изменяют положение автоматически, чтобы не мешать сну человека.\r\nРучное управление: Возможно управлять шторами вручную через веб-интерфейс.\r\nОбратная связь: Датчики положения штор информируют систему о текущем их состоянии.\r\n🚰 Автополив (насос)\r\nПолив настраивается в зависимости от уровня влажности почвы:\r\n\r\nЕсли 💧 влажность почвы < 65% → включение насоса.\r\nЕсли 💧 влажность почвы > 85% → отключение насоса.\r\n(влажность зависит от растения) \r\n\r\nТакже доступно ручное управление поливом через веб-интерфейс.\r\n💡 Освещение (светодиодная лампа)\r\nСветодиодное освещение работает по принципу экономии энергии, включая лампы только при необходимости:\r\n\r\nАвтоматический режим:\r\nЕсли ☀ освещенность < 300 люкс → включить лампу.\r\nЕсли ☀ освещенность > 600 люкс → выключить лампу.\r\nВключение и выключение ламп можно управлять через веб-интерфейс.\r\nЭнергосбережение: Лампа включается только при недостаточной освещенности, что минимизирует потребление энергии.\r\n🎛 Климат-контроль (вентиляторы)\r\nЕсли температура или уровень CO₂ превышают допустимые пределы, автоматически включаются вентиляторы для поддержания комфортных условий.\r\n\r\n📺 Поднимающийся экран (серво-привод/линейный актуатор)\r\nДля активации экран поднимается на 60° с помощью серво-привода или линейного актуатора, что помогает снизить потребление энергии и предотвратить помехи во время сна. Контроль положения экрана осуществляется через концевые выключатели.\r\n\r\n📸 3. Камера и машинное зрение\r\nКамера будет регулярно делать фотографии для анализа состояния растений:\r\n\r\nФотографирование растений будет происходить по расписанию (например, раз в день в одно и то же время). Для обеспечения одинаковой освещенности, что необходимо для получения качественных снимков и лучшего распознавания, в момент съемки будет включаться лампа.\r\nОбнаружение болезней с помощью OpenCV и нейросети позволит обнаружить возможные проблемы с растениями, такие как болезни или повреждения.\r\nМониторинг роста: сравнение изображений по дням для отслеживания изменений в росте растений (в процессе разработки).\r\nОтправка снимков и уведомлений в Telegram-бот для удаленного мониторинга.\r\nУведомления о проблемах (например, пожелтение листьев или других симптомов болезней).\r\n🌍 4. Веб-интерфейс\r\nЧерез веб-интерфейс пользователь сможет:\r\n\r\nПросматривать данные с датчиков в реальном времени.\r\nНастроить расписание полива и освещения.\r\nУправлять шторами, насосом, освещением, климатом.\r\nПросматривать отчеты и графики изменения условий в ферме.\r\n🔋 5. Энергосбережение и резервное питание\r\nДля обеспечения бесперебойной работы системы:\r\n\r\nМониторинг заряда аккумулятора.\r\nАвтоматический переход на резервное питание (UPS) при отключении электричества.', '2025-04-06 21:04:49'),
(18, 'Предварительная таблица покупок', '1. Основной контроллер\r\nRaspberry Pi 5 – центральный узел управления системой.\r\n2. Датчики\r\nDHT22/AM2302 – датчик температуры и влажности воздуха.\r\nYL-69 (FC-28) – датчик влажности почвы.\r\nBH1750 – датчик освещенности.\r\nMH-Z19B – датчик CO₂.\r\nBMP280/BME280 – датчик давления воздуха.\r\nADS1115 – 16-битный АЦП для аналоговых датчиков.\r\nHC-SR04 – ультразвуковой датчик уровня воды.\r\n3. Автоматические системы\r\nPCA9685 – PWM-контроллер для управления серво-приводами.\r\nL298N – драйвер двигателей для управления моторами.\r\n5V реле – для управления насосом и освещением.\r\nСветодиодная лампа – освещение для растений.\r\nСерво-привод – для управления шторами и поднимающимся экраном.\r\nЛинейный актуатор – альтернатива серво-приводу для подъема экрана.\r\n4. Камера и машинное зрение\r\nКамера для Raspberry Pi – для мониторинга состояния растений.\r\n5. Дополнительные компоненты\r\nАккумулятор и UPS – для резервного питания системы.', '2025-04-06 21:05:00'),
(19, ' Автоматическая система полива для проекта ФитоДомик', 'Для эффективного увлажнения растений моя система полива будет включать капельный полив и форсунку тумана низкого давления.\r\n\r\n🔹 Бак для воды\r\n\r\nСъемный, чтобы его можно было легко наполнять и чистить.\r\nМатериал: ПВХ, поликарбонат или акрил – эти материалы не мешают работе ультразвукового датчика уровня воды (HC-SR04).\r\n🔹 Насос и подача воды\r\n\r\nПогружной насос DC6V размещен внутри бака.\r\nЕсли мощности не хватит для подъема воды на 1,5 м, заменю его на более мощный.\r\nИспользуется гибкая трубка для подачи воды к капельному поливу и форсунке.\r\n🔹 Два вида полива\r\n✅ Капельный полив – для подачи воды непосредственно к корням, снижает испарение и экономит воду.\r\n✅ Форсунка тумана – создает мелкодисперсный туман, повышая влажность воздуха.\r\n\r\n🔹 Контроль и автоматизация\r\n\r\nУровень воды в баке контролируется ультразвуковым датчиком HC-SR04.\r\nАвтоматическое включение полива в зависимости от влажности почвы и воздуха.\r\nСистема обеспечит оптимальный режим увлажнения для растений, автоматизируя процесс полива и поддерживая благоприятный микроклимат 🌱💦.', '2025-04-06 21:05:29'),
(20, 'Проект умных штор с использованием потенциометра', 'В рамках данного проекта разрабатывается система умных штор, которая автоматически регулирует их положение в зависимости от внешних условий или предпочтений пользователя. Система использует потенциометр, который служит для контроля положения штор. Потенциометр, встроенный в механизм штор, изменяет своё сопротивление в зависимости от положения, что позволяет точно контролировать степень их открытия.\r\n\r\nПринцип работы:\r\n\r\nПотенциометр: Этот компонент подключается к управляющей системе и отслеживает изменение положения штор. Когда пользователь вращает потенциометр, система регулирует механизмы подъема штор, в зависимости от настроек.\r\nКнопка управления: Потенциометр активирует кнопку, которая используется для остановки или начала движения штор. Например, если шторы находятся в процессе подъема, пользователь может остановить их с помощью нажатия кнопки. Когда кнопка нажата снова, шторы начинают двигаться дальше в сторону полного поднятия или опускания.\r\nУправление движением: Используя этот принцип, шторы можно не только открывать и закрывать, но и точно регулировать их положение для создания оптимальных условий в помещении.', '2025-04-06 21:05:45');

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `id` int NOT NULL,
  `first_name` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `last_name` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `username` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `is_admin` tinyint(1) DEFAULT '0',
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `last_login` timestamp NULL DEFAULT NULL,
  `login_attempts` int DEFAULT '0',
  `is_locked` tinyint(1) DEFAULT '0',
  `reset_token` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `reset_token_expires` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `users`
--

INSERT INTO `users` (`id`, `first_name`, `last_name`, `email`, `username`, `password`, `is_admin`, `created_at`, `last_login`, `login_attempts`, `is_locked`, `reset_token`, `reset_token_expires`) VALUES
(11, 'Slava', 'Domnin', 'vdomninsg@mail.ru', 'legenda', '$2y$10$asQpb39gnABoVx66sJ3vEeHzbsbFtI0RdYdCA5e57zYnb.zPyP9bG', 1, '2025-04-07 10:30:12', '2025-04-20 11:22:14', 0, 0, NULL, NULL),
(12, 'Александр', 'Шмелев', 'yayca444@mail.ru', 'anakonda', '$2y$10$OyP4fQz.5OY.arUQW748Z.4/9vukMkpQtNX1kmqDPNG/FDQfQ7WJm', 1, '2025-04-07 11:45:49', '2025-04-07 12:00:56', 0, 0, NULL, NULL),
(13, 'Илья', 'Изразцов', 'ipidor@gmail.com', 'Izik', '$2y$10$.YcdN..w/Thc/5ZV5qktAu0k/StWH4mLwcbh2wYve62ka5705LfqO', 1, '2025-04-07 12:00:52', '2025-04-07 12:00:59', 0, 0, NULL, NULL),
(14, 'CHATgptTUnelOxime PROMS', 'CHATgptTUnelOxime PROMS', 'hannahnilana@gazeta.pl', 'CHATgptTUnelOxime PRO', '$2y$10$XS//cz4xCn0vuAc0gfNKCefC3LyTSbFYkh.4lmcdgYZfue5OzukIS', 0, '2025-04-26 05:38:03', '2025-04-26 05:38:04', 0, 0, NULL, NULL);

--
-- Триггеры `users`
--
DELIMITER $$
CREATE TRIGGER `after_user_update` AFTER UPDATE ON `users` FOR EACH ROW BEGIN
    IF OLD.password != NEW.password THEN
        INSERT INTO user_logs (user_id, action, ip_address)
        VALUES (NEW.id, 'password_change', 'SYSTEM');
    END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `user_logs`
--

CREATE TABLE `user_logs` (
  `id` int NOT NULL,
  `user_id` int NOT NULL,
  `action` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `ip_address` varchar(45) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `user_agent` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `code`
--
ALTER TABLE `code`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `code_files`
--
ALTER TABLE `code_files`
  ADD PRIMARY KEY (`id`),
  ADD KEY `parent_id` (`parent_id`);

--
-- Индексы таблицы `code_folders`
--
ALTER TABLE `code_folders`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idx_folder_parent` (`parent_id`);

--
-- Индексы таблицы `code_snippets`
--
ALTER TABLE `code_snippets`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idx_snippets_folder` (`folder_id`),
  ADD KEY `idx_snippets_language` (`language`);

--
-- Индексы таблицы `components`
--
ALTER TABLE `components`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `feedback`
--
ALTER TABLE `feedback`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `feedback_cooldown`
--
ALTER TABLE `feedback_cooldown`
  ADD PRIMARY KEY (`ip_address`),
  ADD KEY `idx_cooldown_ip` (`ip_address`);

--
-- Индексы таблицы `feedback_messages`
--
ALTER TABLE `feedback_messages`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idx_messages_ip` (`ip_address`),
  ADD KEY `idx_messages_type` (`type`),
  ADD KEY `idx_messages_faq` (`is_faq`);

--
-- Индексы таблицы `feedback_replies`
--
ALTER TABLE `feedback_replies`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idx_replies_message` (`message_id`);

--
-- Индексы таблицы `photos`
--
ALTER TABLE `photos`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `sessions`
--
ALTER TABLE `sessions`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idx_sessions_user_id` (`user_id`),
  ADD KEY `idx_sessions_last_activity` (`last_activity`);

--
-- Индексы таблицы `settings`
--
ALTER TABLE `settings`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `timeline`
--
ALTER TABLE `timeline`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `unique_email` (`email`),
  ADD UNIQUE KEY `unique_username` (`username`),
  ADD KEY `idx_users_email` (`email`),
  ADD KEY `idx_users_username` (`username`),
  ADD KEY `idx_users_created_at` (`created_at`);

--
-- Индексы таблицы `user_logs`
--
ALTER TABLE `user_logs`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idx_user_logs_user_id` (`user_id`),
  ADD KEY `idx_user_logs_created_at` (`created_at`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `code`
--
ALTER TABLE `code`
  MODIFY `id` int NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT для таблицы `code_files`
--
ALTER TABLE `code_files`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT для таблицы `code_folders`
--
ALTER TABLE `code_folders`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=88;

--
-- AUTO_INCREMENT для таблицы `code_snippets`
--
ALTER TABLE `code_snippets`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=156;

--
-- AUTO_INCREMENT для таблицы `components`
--
ALTER TABLE `components`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=35;

--
-- AUTO_INCREMENT для таблицы `feedback`
--
ALTER TABLE `feedback`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT для таблицы `feedback_messages`
--
ALTER TABLE `feedback_messages`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=44;

--
-- AUTO_INCREMENT для таблицы `feedback_replies`
--
ALTER TABLE `feedback_replies`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=17;

--
-- AUTO_INCREMENT для таблицы `photos`
--
ALTER TABLE `photos`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=20;

--
-- AUTO_INCREMENT для таблицы `posts`
--
ALTER TABLE `posts`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT для таблицы `timeline`
--
ALTER TABLE `timeline`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=21;

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=15;

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `code_files`
--
ALTER TABLE `code_files`
  ADD CONSTRAINT `code_files_ibfk_1` FOREIGN KEY (`parent_id`) REFERENCES `code_files` (`id`) ON DELETE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
